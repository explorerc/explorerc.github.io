<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CC</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-22T02:55:47.319Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chen Qi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信官方接口</title>
    <link href="http://yoursite.com/2018/12/22/%E5%BE%AE%E4%BF%A1%E5%AE%98%E6%96%B9%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/12/22/微信官方接口/</id>
    <published>2018-12-22T02:55:47.319Z</published>
    <updated>2018-12-22T02:55:47.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对接微信公众号平台"><a href="#对接微信公众号平台" class="headerlink" title="对接微信公众号平台"></a>对接微信公众号平台</h2><p>1）获取微信API借口<br>看微信|公众平台开发者文档中的接入指南<br>2）下载API接口文件<br>看微信|公众平台开发者文档<br>解压–&gt;wx_sample.php<br>3）复制wx_sample.php到项目（第一层目录），并更名为api.php<br>4）确认api.php文件中TOKEN常量的定义，并通过svn上传到BAE<br>5）打开微信公众平台的开发者中心<br>URL：上面自定的网址/api.php (一定要把接口文件放在网址后面)<br>Token：weixin (接口文件中TOKEN的值)<br>确认无误后点击确认按钮，若失败，再进行提交<br>6）通过微信手机将端测试<br>第一次发消息测试，系统不会任何返回信息，因为接口文件值负责检测<br>7）开启自动恢复<br>a. 修改接口文件：注释掉valid方法，因为默认验证通过后，就会退出<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// <span class="variable">$wechatObj</span>-&gt;valid</span><br></pre></td></tr></table></figure></p><p>b. 开启自动回复<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wechatObj</span>-&gt;response</span><br></pre></td></tr></table></figure></p><ol start="8"><li>提交修改的代码，再进行测试</li></ol><h2 id="微信官方接口分析"><a href="#微信官方接口分析" class="headerlink" title="微信官方接口分析"></a>微信官方接口分析</h2><p>define(“TOKEN”,”weixin”); // 定义TOKEN密钥<br>$wechatObj = new wechatCallbackapiTest(); // 实例化微信对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对接微信公众号平台&quot;&gt;&lt;a href=&quot;#对接微信公众号平台&quot; class=&quot;headerlink&quot; title=&quot;对接微信公众号平台&quot;&gt;&lt;/a&gt;对接微信公众号平台&lt;/h2&gt;&lt;p&gt;1）获取微信API借口&lt;br&gt;看微信|公众平台开发者文档中的接入指南&lt;br&gt;2）下载
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信平台开发</title>
    <link href="http://yoursite.com/2018/12/22/%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/12/22/微信平台开发/</id>
    <published>2018-12-22T02:28:47.037Z</published>
    <updated>2018-12-22T02:28:47.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h2><h3 id="微信公众平台账号"><a href="#微信公众平台账号" class="headerlink" title="微信公众平台账号"></a>微信公众平台账号</h3><p>订阅号：个人版用户，每天可以发一条消息<br>服务号：企业版用户，每月可以群发四条消息</p><h3 id="在线虚拟逐句或服务器（SAE云引擎、BAE云引擎、阿里云服务器）"><a href="#在线虚拟逐句或服务器（SAE云引擎、BAE云引擎、阿里云服务器）" class="headerlink" title="在线虚拟逐句或服务器（SAE云引擎、BAE云引擎、阿里云服务器）"></a>在线虚拟逐句或服务器（SAE云引擎、BAE云引擎、阿里云服务器）</h3><h3 id="Tortoise（SVN客户端软件）"><a href="#Tortoise（SVN客户端软件）" class="headerlink" title="Tortoise（SVN客户端软件）"></a>Tortoise（SVN客户端软件）</h3><h2 id="开发者模式原理"><a href="#开发者模式原理" class="headerlink" title="开发者模式原理"></a>开发者模式原理</h2><p><img src="../../../../images/post_img/wechat_yuanli.png"></p><h2 id="自定义云服务器（BAE）"><a href="#自定义云服务器（BAE）" class="headerlink" title="自定义云服务器（BAE）"></a>自定义云服务器（BAE）</h2><ol><li>自定义云平台<br><a href="http://bce.baidu.com/index.html" target="_blank" rel="noopener">http://bce.baidu.com/index.html</a></li><li>登录BAE云引擎<br>产品服务—&gt; 应用引擎BAE</li><li>单击添加部署按钮<br>名称：任意都可以<br>类型：根据项目需要（我这儿选择的PHP-web）（一定不要选错)<br>域名：自定义<br>执行单元个数：1<br>执行单元套餐：256<br>其他的默认<br>确认无误后，点击确定<br>第二次确认无误后，点击确认<br>单击管理控制台</li><li>访问我们的域名<br>域名/index.php</li><li>管理BAE云服务器<br>a. 新建文件夹，并进入<br>b. 鼠标右键<br>svn检出操作<br>百度云里复制SVN/GIT地址<br>然后根据提示输入用户名和密码（百度的账户和密码）</li><li>可以修改index.php文件<br>鼠标右键通过svn提交代码到百度云<br>配置自动发布：百度云只能够-&gt;配置文件-&gt;发布设置-&gt;开启自动发布</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开发者模式&quot;&gt;&lt;a href=&quot;#开发者模式&quot; class=&quot;headerlink&quot; title=&quot;开发者模式&quot;&gt;&lt;/a&gt;开发者模式&lt;/h2&gt;&lt;h3 id=&quot;微信公众平台账号&quot;&gt;&lt;a href=&quot;#微信公众平台账号&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue强制刷新组件</title>
    <link href="http://yoursite.com/2018/12/20/vue%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/12/20/vue强制刷新组件/</id>
    <published>2018-12-20T10:34:14.398Z</published>
    <updated>2018-12-20T10:34:14.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>分页组件用过的elemntUi中的el-pagination，大体是三层嵌套的关系，第一层页面 &lt;- 子组件 &lt;- el-pagination<br>最近修改我们项目的样式，和调整一些小bug，然后遇到了一个按条件查询，分页组件的currentPage无法实时刷新的问题，<br>比如我按’全部’这个条件查询的时候，此时我已经切换到了第四页的内容，然后我切换到按’红包’这个条件查询，查询的结果是第一页的了，<br>在方法中我已经把currentPage = 1了，但是分页组件的内容仍然没有发生变化，开始以为我在第二层中加入了watch监听currentPage的变化，<br>但是分页组件仍然没有变化，多次尝试后，我发现当子组件被强制刷新后，currentPage会等于1，于是我就想到了强制刷新的方法</p><h2 id="第一层分页组件组件"><a href="#第一层分页组件组件" class="headerlink" title="第一层分页组件组件"></a>第一层分页组件组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ve-pagination :total=<span class="string">"total"</span></span><br><span class="line">               :pageSize=<span class="string">"searchParams.pageSize"</span></span><br><span class="line">               v-if=<span class="string">"iscurrentPage"</span></span><br><span class="line">               :currentPage=<span class="string">"currentPage"</span></span><br><span class="line">               @changePage=<span class="string">"changePage"</span>/&gt;</span><br></pre></td></tr></table></figure><p>iscurrentPage:我们用于改变它的值实现强制刷新</p><h2 id="强制刷新"><a href="#强制刷新" class="headerlink" title="强制刷新"></a>强制刷新</h2><h3 id="强制刷新方法"><a href="#强制刷新方法" class="headerlink" title="强制刷新方法"></a>强制刷新方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">currentPageReset</span></span> () &#123;</span><br><span class="line">    this.iscurrentPage = <span class="literal">false</span></span><br><span class="line">    this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">      this.iscurrentPage = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="监听下拉框值的变化"><a href="#监听下拉框值的变化" class="headerlink" title="监听下拉框值的变化"></a>监听下拉框值的变化</h3><p>我这儿监听的是一个对象中具体某一个值的变化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'searchParams.type'</span>: &#123;</span><br><span class="line">    handler (val, oldValue) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === <span class="string">'RECHARGE'</span>) &#123;</span><br><span class="line">        this.searchLabel = <span class="string">'很抱歉，没有搜索到账户充值的结果'</span></span><br><span class="line">        this.currentPageReset()</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="string">'RED_PACK'</span>) &#123;</span><br><span class="line">        this.searchLabel = <span class="string">'很抱歉，没有搜索到红包消费的结果'</span></span><br><span class="line">        this.currentPageReset()</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="string">'RE_RED_PACK'</span>) &#123;</span><br><span class="line">        this.searchLabel = <span class="string">'很抱歉，没有搜索到红包返回的结果'</span></span><br><span class="line">        this.currentPageReset()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        this.searchLabel = <span class="string">'暂无数据'</span></span><br><span class="line">        this.currentPageReset()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;分页组件用过的elemntUi中的el-pagination，大体是三层嵌套的关系，第一层页面 &amp;lt;- 子组件 &amp;lt;- el-pag
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里图标库的使用</title>
    <link href="http://yoursite.com/2018/12/19/%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/19/阿里图标库使用/</id>
    <published>2018-12-19T07:00:10.315Z</published>
    <updated>2018-12-19T07:00:10.316Z</updated>
    
    <content type="html"><![CDATA[<p>场景：我是以及再一个项目组中了，然后我要在伪元素中使用项目组中的图标</p><p>找到目标图标，鼠标置于改图标之上，点击获取代码</p><p>将这个代码做一定的修改，例：&#xe6b0;  –&gt;  \e6b0</p><p>将\e6b0 放于 伪元素的content:’’ 的引号中</p><p>并在样式中加入font-family:’iconfont’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;场景：我是以及再一个项目组中了，然后我要在伪元素中使用项目组中的图标&lt;/p&gt;
&lt;p&gt;找到目标图标，鼠标置于改图标之上，点击获取代码&lt;/p&gt;
&lt;p&gt;将这个代码做一定的修改，例：&amp;#xe6b0;  –&amp;gt;  \e6b0&lt;/p&gt;
&lt;p&gt;将\e6b0 放于 伪元素的conten
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git提交代码的步骤</title>
    <link href="http://yoursite.com/2018/12/19/git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/12/19/git提交代码的步骤/</id>
    <published>2018-12-19T06:45:49.223Z</published>
    <updated>2018-12-19T06:45:49.224Z</updated>
    
    <content type="html"><![CDATA[<p>场景：现在我本地有两个分支，master和cq两个分支<br>master分支主要用于pull代码和push代码，cq分支主要用于修改代码</p><h2 id="查看本地文件的状态"><a href="#查看本地文件的状态" class="headerlink" title="查看本地文件的状态"></a>查看本地文件的状态</h2><p>git status</p><h2 id="将代码从工作区提交到缓存区"><a href="#将代码从工作区提交到缓存区" class="headerlink" title="将代码从工作区提交到缓存区"></a>将代码从工作区提交到缓存区</h2><p>git add .<br>. 表示提交全部修改的文件到缓存区</p><h2 id="将文件从缓存区提交到版本去"><a href="#将文件从缓存区提交到版本去" class="headerlink" title="将文件从缓存区提交到版本去"></a>将文件从缓存区提交到版本去</h2><p>git commit -m ‘ui’<br>‘’ 中的内容表示你这次修改的是什么，或者修改的目的是什么</p><h2 id="切换到master分支"><a href="#切换到master分支" class="headerlink" title="切换到master分支"></a>切换到master分支</h2><p> git checkout master</p><h2 id="获取远程上的最新代码"><a href="#获取远程上的最新代码" class="headerlink" title="获取远程上的最新代码"></a>获取远程上的最新代码</h2><p>git pull origin master<br>提交前，一定要pull一下，否则将不能提交或者覆盖掉别人修改的代码<br>origin 表示远程仓库名<br>master 表示远程分支名</p><h2 id="合并本地的cq和master分支"><a href="#合并本地的cq和master分支" class="headerlink" title="合并本地的cq和master分支"></a>合并本地的cq和master分支</h2><p>git merge cq</p><h2 id="将现在master分支的代码提交到远程master分支"><a href="#将现在master分支的代码提交到远程master分支" class="headerlink" title="将现在master分支的代码提交到远程master分支"></a>将现在master分支的代码提交到远程master分支</h2><p>git push origin master</p><h2 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h2><p>git grep ‘&lt;&lt;&lt;&lt;&lt;’<br>找到冲突文件，修改掉冲突，再add、commit、push一下就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;场景：现在我本地有两个分支，master和cq两个分支&lt;br&gt;master分支主要用于pull代码和push代码，cq分支主要用于修改代码&lt;/p&gt;
&lt;h2 id=&quot;查看本地文件的状态&quot;&gt;&lt;a href=&quot;#查看本地文件的状态&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css3中的resize，user-select属性，多列布局特性，怪异盒子模型，倒影</title>
    <link href="http://yoursite.com/2018/12/10/css3-resize%E7%AD%89/"/>
    <id>http://yoursite.com/2018/12/10/css3-resize等/</id>
    <published>2018-12-10T02:26:06.594Z</published>
    <updated>2018-12-10T02:26:06.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>盒子大小的拖动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resize: both; // 支持宽高拖动</span><br><span class="line">resize: none; // 支持狂傲拖动</span><br></pre></td></tr></table></figure></p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="let、const"><a href="#let、const" class="headerlink" title="let、const"></a>let、const</h3><p>let定义的变量不会被变量提升，const定义的常量不能被修改<br>const定义了一个对象，对象的属性是可以被修改的，例：student.name = “cc”</p><h3 id="import、export"><a href="#import、export" class="headerlink" title="import、export"></a>import、export</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 全部导入</span><br><span class="line">import people from <span class="string">'./example'</span></span><br><span class="line">// 将整个模块当作单一对象进行导入，该模块的所有导出都会作为对象的属性存在</span><br><span class="line">import * as example from <span class="string">"./example.js"</span></span><br><span class="line">console.log(example.name)</span><br><span class="line">console.log(example.getName())</span><br><span class="line">// 导入部分，引入非 default 时，使用花括号</span><br><span class="line">import &#123;name, age&#125; from <span class="string">'./example'</span></span><br><span class="line">// 导出默认, 有且只有一个默认</span><br><span class="line"><span class="built_in">export</span> default App</span><br><span class="line">// 部分导出</span><br><span class="line"><span class="built_in">export</span> class App extend Component &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="class、extends、super"><a href="#class、extends、super" class="headerlink" title="class、extends、super"></a>class、extends、super</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    　　this.type = <span class="string">'animal'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    says(say) &#123;</span><br><span class="line">    　　console.log(this.type + <span class="string">' says '</span> + say);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> animal = new Animal();</span><br><span class="line">animal.says(<span class="string">'hello'</span>); //animal says hello</span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">　　<span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">　　　　super();</span><br><span class="line">　　　　this.type = <span class="string">'cat'</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> cat = new Cat();</span><br><span class="line">cat.says(<span class="string">'hello'</span>); //cat says hello</span><br></pre></td></tr></table></figure><p>首先定义了一个”类”，有constructor构造方法，this关键字则代表实例对象。换句话来说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的<br>class之间可以通过extends实现继承。如实例中Cat类，通过extends关键字，继承了Animal类的所有属性和fnagfa。<br>super关键字，它指代父亲的实例（即父亲的this对象）。子类必须在constructor方法中调用super方法，否则实例时会报错。因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用，子类就得不到this对象<br>ES6的继承机制，实质是看创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>函数的快捷写法。不需要function来创建函数，省略retrun，继承当前上下文的this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// ES5</span><br><span class="line">var arr1 = [1, 2, 3];</span><br><span class="line">var newArr1 = arr1.map(<span class="keyword">function</span>(x) &#123;</span><br><span class="line">　　<span class="built_in">return</span> x + 1;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// ES6</span><br><span class="line"><span class="built_in">let</span> newArr2 = arr1.map((x) =&gt; &#123;</span><br><span class="line">　　x + 1</span><br><span class="line">&#125;);</span><br><span class="line">// ES6 函数有且只有一个参数是，可以省略括号，函数中有且只有一个表达式可以省略&#123;&#125;</span><br><span class="line"><span class="built_in">let</span> newArr2 = arr1.map(x =&gt; x + 1 );</span><br></pre></td></tr></table></figure></p><h3 id="tempalte-string-模版字符串"><a href="#tempalte-string-模版字符串" class="headerlink" title="tempalte string(模版字符串)"></a>tempalte string(模版字符串)</h3><p>第一个用途：字符串拼接。将表达式嵌入字符串中进行拼接，语法 <code>hello ${变量}</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">var name1 = <span class="string">"bai"</span>;</span><br><span class="line">console.log(<span class="string">'hello '</span> + name1);</span><br><span class="line">// es6</span><br><span class="line">const name2 = <span class="string">"ming"</span>;</span><br><span class="line">console.log(`hello <span class="variable">$&#123;name2&#125;</span>`);</span><br></pre></td></tr></table></figure></p><p>第二个用途：多行字符串拼接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">var msg = <span class="string">"Hi \</span></span><br><span class="line"><span class="string">man!"</span>;</span><br><span class="line">// es6</span><br><span class="line">const template = `&lt;div&gt;</span><br><span class="line">&lt;span&gt;hello world&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;`;</span><br></pre></td></tr></table></figure></p><h3 id="destructing-解构"><a href="#destructing-解构" class="headerlink" title="destructing (解构)"></a>destructing (解构)</h3><p>简化数组和对象中信息的提取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> people2 = &#123;</span><br><span class="line">　　name: <span class="string">'ming'</span>,</span><br><span class="line">　　age: 20,</span><br><span class="line">　　color: [<span class="string">'red'</span>, <span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> &#123; name, age &#125; = people2;</span><br><span class="line"><span class="built_in">let</span> [first, second] = people2.color;</span><br><span class="line">console.log(`<span class="variable">$&#123;name&#125;</span>----<span class="variable">$&#123;age&#125;</span>----<span class="variable">$&#123;first&#125;</span>`);</span><br></pre></td></tr></table></figure></p><h3 id="default-函数默认参数"><a href="#default-函数默认参数" class="headerlink" title="default 函数默认参数"></a>default 函数默认参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// ES5 给函数定义参数默认值</span><br><span class="line"><span class="keyword">function</span> foo(num) &#123;</span><br><span class="line">　　num = num || 200;</span><br><span class="line">　　<span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">// ES6</span><br><span class="line"><span class="keyword">function</span> foo(num = 200) &#123;</span><br><span class="line">　　<span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rest-arguments-（rest参数）"><a href="#rest-arguments-（rest参数）" class="headerlink" title="rest arguments （rest参数）"></a>rest arguments （rest参数）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(x, y, ...rest) &#123;</span><br><span class="line">　　<span class="built_in">return</span> ((x + y) * rest.length);</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, <span class="string">'hello'</span>, <span class="literal">true</span>, 7); // 9</span><br></pre></td></tr></table></figure><h3 id="Spread-Operator-（展开运算符）"><a href="#Spread-Operator-（展开运算符）" class="headerlink" title="Spread Operator （展开运算符）"></a>Spread Operator （展开运算符）</h3><p>第一个用途：组装数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">let</span> colorful = [...color, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line">console.log(colorful); // [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br></pre></td></tr></table></figure></p><p>第二个用途：获取数组除了某几项的其他项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> num = [1, 3, 5, 7, 9];</span><br><span class="line"><span class="built_in">let</span> [first, second, ...rest] = num;</span><br><span class="line">console.log(rest); // [5, 7, 9]</span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// ES5</span><br><span class="line"><span class="keyword">function</span> people(name, age) &#123;</span><br><span class="line">　　<span class="built_in">return</span> &#123;</span><br><span class="line">　　　　name: name,</span><br><span class="line">　　　　age: age</span><br><span class="line">　　&#125;;</span><br><span class="line">&#125;</span><br><span class="line">// ES6</span><br><span class="line"><span class="keyword">function</span> people(name, age) &#123;</span><br><span class="line">　　<span class="built_in">return</span> &#123;</span><br><span class="line">　　　　name,</span><br><span class="line">　　　　age</span><br><span class="line">　　&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外：Object.assign()<br>ES6 对象提供了Object.assign()这个方法来实现浅复制。Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{}<br>用法1：合并对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var first = &#123; name: <span class="string">"Bob"</span> &#125;;</span><br><span class="line">var last = &#123; lastName: <span class="string">"Smith"</span> &#125;;</span><br><span class="line">var person = Object.assign(first, last);</span><br><span class="line">console.log(person);</span><br><span class="line">// Output:</span><br><span class="line">// &#123; name: <span class="string">"Bob"</span>, lastName: <span class="string">"Smith"</span> &#125;</span><br></pre></td></tr></table></figure></p><p>用法2：克隆对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; person: <span class="string">"Bob Smith"</span>&#125;;</span><br><span class="line">var <span class="built_in">clone</span> = Object.assign(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure></p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>用同步的方式写一步代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 发起异步请求</span><br><span class="line">fetch(<span class="string">'/api/todos'</span>)</span><br><span class="line">.<span class="keyword">then</span>(res =&gt; res.json())</span><br><span class="line">.<span class="keyword">then</span>(data =&gt; (&#123; data &#125;))</span><br><span class="line">.catch(err =&gt; (&#123; err &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>生成器（generator）是能返回一个迭代器的函数<br>生成器也是一种函数，最直观的表现就是比普通的function多一个*号，在其函数体内可以使用yield关键字，函数会在每个yield后暂停<br>如：银行取号排队办理业务<br>迭代器：调用一个generator时，它将返回一个迭代器对象。这个跌打器对象拥有一个叫做next的方法帮组你重启generator函数并得到了下一个值。nenxt方法不返回值，它返回的对象具有两个属性：done和value。calue是你获得的值，done用来表明你的generator是否已停止提供值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 生成器</span><br><span class="line"><span class="keyword">function</span> *<span class="function"><span class="title">createIterator</span></span>() &#123;</span><br><span class="line">    yield 1;</span><br><span class="line">    yield 2;</span><br><span class="line">    yield 3;</span><br><span class="line">&#125;</span><br><span class="line">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span><br><span class="line"><span class="built_in">let</span> iterator = createIterator();</span><br><span class="line">console.log(iterator.next().value); // 1</span><br><span class="line">console.log(iterator.next().value); // 2</span><br><span class="line">console.log(iterator.next().value); // 3</span><br></pre></td></tr></table></figure></p><p>参考文献：<a href="https://www.cnblogs.com/fangsmile/p/7081194.html" target="_blank" rel="noopener">https://www.cnblogs.com/fangsmile/p/7081194.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;resize&quot;&gt;&lt;a href=&quot;#resize&quot; class=&quot;headerlink&quot; title=&quot;resize&quot;&gt;&lt;/a&gt;resize&lt;/h2&gt;&lt;p&gt;盒子大小的拖动&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="http://yoursite.com/2018/12/09/vuex/"/>
    <id>http://yoursite.com/2018/12/09/vuex/</id>
    <published>2018-12-09T09:39:59.256Z</published>
    <updated>2018-12-09T09:39:59.256Z</updated>
    
    <content type="html"><![CDATA[<p>非父子和非兄弟组件传值</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><br>  <li>src目录下创建一个vuex的文件夹</li><br>  <li>vuex 文件夹里面创建一个store.js</li><br>  <li>安装vuex<br>      npm install vuex –save<br>  </li><br>  <li>store.js里面引入vue 引入vuex 并且use<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line">import Vuex from <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">/* state在vuex中用于存储数据 */</span><br><span class="line">var state=&#123;</span><br><span class="line">    count:1</span><br><span class="line">&#125;</span><br><span class="line">/* state在vuex中用于存储数据 */</span><br><span class="line">var mutation=&#123;</span><br><span class="line">    <span class="function"><span class="title">inCount</span></span>()&#123;</span><br><span class="line">         ++state.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">export</span> default store</span><br></pre></td></tr></table></figure><br><br><ol><br>## 组件中使用<br><ol><br><li>引入store<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import store from <span class="string">'../vuex/store.js'</span></span><br></pre></td></tr></table></figure><br><br></li><br><li>注册<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span></span>()&#123;<span class="built_in">return</span>&#123;&#125;&#125;,</span><br><span class="line">    store,</span><br><span class="line">    methods:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></li><br><li>获取store中的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.state.数据</span><br></pre></td></tr></table></figure><br><br></li><br><li>触发mutation中的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.commit(<span class="string">'inCount'</span>)</span><br></pre></td></tr></table></figure><br><br></li><br></ol></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;非父子和非兄弟组件传值&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;ol&gt;&lt;br&gt;  &lt;li&gt;src目录下创建一个vuex的文件夹&lt;/li&gt;&lt;br&gt;  &lt;li&gt;vuex 文件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue路由</title>
    <link href="http://yoursite.com/2018/12/09/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2018/12/09/vue路由/</id>
    <published>2018-12-09T08:43:00.721Z</published>
    <updated>2018-12-09T08:43:00.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br><span class="line">cnpm install vue-router --save</span><br></pre></td></tr></table></figure><h2 id="引入并use"><a href="#引入并use" class="headerlink" title="引入并use"></a>引入并use</h2><pre><code>import VueRouter from &apos;vue-router&apos;Vue.use(VueRouter)</code></pre><h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p>1 . 创建组件 引入组件<br>2 . 定义路由 （建议复制js）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const routes = &#123;</span><br><span class="line">    &#123;path:<span class="string">'/foo'</span>,componet:Foo&#125;</span><br><span class="line">    &#123;path:<span class="string">'/bar'</span>,componet:BAr&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3 . 实例花VueRouter<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cosnt router = new VueRouter(&#123;</span><br><span class="line">    routes //(缩写) 相当于routes:routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>4 . 挂载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    router,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>5 . 使用</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h3 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const routes = &#123;</span><br><span class="line">    &#123;path:<span class="string">'/foo/:aid'</span>,componet:Foo&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"'/foo/'+key"</span>&gt;&#123;&#123;key&#125;&#125; -- &#123;&#123;item&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$route</span>.params</span><br></pre></td></tr></table></figure><h2 id="路由get传值"><a href="#路由get传值" class="headerlink" title="路由get传值"></a>路由get传值</h2><h3 id="传值-1"><a href="#传值-1" class="headerlink" title="传值"></a>传值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">"'/foo?key='+key"</span>&gt;&#123;&#123;key&#125;&#125; -- &#123;&#123;item&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$route</span>.query</span><br></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>this.$router.push({path:’/content/495’})</p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><h3 id="配置路由-1"><a href="#配置路由-1" class="headerlink" title="配置路由"></a>配置路由</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const routes = &#123;</span><br><span class="line">    &#123;path:<span class="string">'/news'</span>,componet:News,name:<span class="string">'news'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.router.push(&#123;name:<span class="string">'news'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 实例化VueRouter时</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    mode:&apos;history&apos;,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const routes = &#123;</span><br><span class="line"> &#123;</span><br><span class="line">    path:<span class="string">'/user'</span>,</span><br><span class="line">    componet:User,</span><br><span class="line">    name:<span class="string">'user'</span>,</span><br><span class="line">    children:[</span><br><span class="line">        &#123;path:<span class="string">'useradd'</span>,component:UserAdd&#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue项目</title>
    <link href="http://yoursite.com/2018/12/09/vue%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/12/09/vue小知识/</id>
    <published>2018-12-09T01:20:59.564Z</published>
    <updated>2018-12-09T01:20:59.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><br>  <li>watch监听对象<br>  每个监听都是有handler的，也可以不写；监听对象时，必须写上deep<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  user: &#123; hander(newValue,oldValue) =&gt; &#123;</span><br><span class="line">        console.log(<span class="string">'user被修改了'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>  </li><br>  <li>获取组件中data中的值： vm.name 或者 vm.$data.name</li><br>  <li>获取组件中data中的值： vm.name 或者 vm.$data.name </li><br>  <li>获取绑定的元素：vm.$el  设置样式：vm.$el.style.color = red </li><br>  <li>获取自定义属性：vm.$options.name </li><br>  <li>获取添加了ref属性的元素：vm.$refs.namebox </li><br>  <li>手动挂载vue实例：vue.$mount(‘#app’) 或者 new Vue({}).$mount(‘#app’) </li><br>  <li>挂载时调用某个函数获取某一个值：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getValue () &#123; this.nextTick(function()&#123; console.log(this.$refs.input.value)&#125;)&#125;</span><br></pre></td></tr></table></figure><br><br>  </li><br>  <li> 给data中的user对象新增age属性： this.$set(this.user,’age’,22) </li><br>  <li> 删除data中的user对象age属性： this.$set(this.user,’age’) </li><br>  <li> 缓存数据： localStorage.setItem(‘key’,JSON.stringfify(this.list)) </li><br>  <li> 获取缓存数据： var list = JSON.parse(localStorage.getItem(‘list’)) </li><br>  <li> 请求数据：<br>        1 . 安装vue-resource模块  记得加上–save<br>        2 . main.js引入 vue-resource<br>            import VueResource from ‘vue-resouce’<br>        3 . Vue.use(VueRe souce)<br>   </li><br></ol><h2 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h2><p>动态绑定类名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=<span class="string">"(item, key) in items"</span> :class=<span class="string">"&#123;'red':key===1&#125;"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;ol&gt;&lt;br&gt;  &lt;li&gt;watch监听对象&lt;br&gt;  每个监听都是有handler的，也可以不写；监听对象时，必须写上deep&lt;br&gt;  &lt;f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue组件传值</title>
    <link href="http://yoursite.com/2018/12/09/vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2018/12/09/vue组件传值/</id>
    <published>2018-12-09T01:18:55.807Z</published>
    <updated>2018-12-09T01:18:55.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件给子组件传值："><a href="#父组件给子组件传值：" class="headerlink" title="父组件给子组件传值："></a>父组件给子组件传值：</h2><pre><code>1 . 父组件调用子组件的时候 绑定动态属性    &lt;v-head :title=&apos;title&apos;&gt;&lt;/v-head&gt;    引号中的title表示父组件中的数据2 . 在子组件里面通过 props接受父组件传过来的数据    props:[&quot;title&quot;]3 . 也可以传方法和把整个父组件，方法和上面也一样</code></pre><h2 id="非父子组件给子组件传值-事件广播-："><a href="#非父子组件给子组件传值-事件广播-：" class="headerlink" title="非父子组件给子组件传值(事件广播)："></a>非父子组件给子组件传值(事件广播)：</h2><pre><code>1 . 新建一个js文件 然后引入vue 实例华vue 然后暴露这个实例    import Vue from &apos;vue&apos;    var VueEvent = new Vue ()    export default VueEvent2 . 在广播的地方引入刚才定义好的实例    import VueEvent from &apos;地址&apos;3 . 通过VueEmit.$emit(&apos;名称&apos;,&apos;数据&apos;)4 . 在接受数据的地方通过    VueEmit.$on(&apos;名称&apos;,function(){})</code></pre><h2 id="父组件主动获取子组件的数据和方法"><a href="#父组件主动获取子组件的数据和方法" class="headerlink" title="父组件主动获取子组件的数据和方法"></a>父组件主动获取子组件的数据和方法</h2><pre><code>1 . 调用子组件的时候定义一个ref    &lt;v-head ref=&apos;head&apos;&gt;&lt;/v-head&gt;2 . 在父组件里面通过    this.$refs.header.属性    this.$refs.header.方法</code></pre><h2 id="父组件主动获取子组件的值"><a href="#父组件主动获取子组件的值" class="headerlink" title="父组件主动获取子组件的值"></a>父组件主动获取子组件的值</h2><pre><code>this.$parent.header.属性this.$parent.header.方法</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父组件给子组件传值：&quot;&gt;&lt;a href=&quot;#父组件给子组件传值：&quot; class=&quot;headerlink&quot; title=&quot;父组件给子组件传值：&quot;&gt;&lt;/a&gt;父组件给子组件传值：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1 . 父组件调用子组件的时候 绑定动态属性
    &amp;lt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建vue开发环境</title>
    <link href="http://yoursite.com/2018/12/08/vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/12/08/vue项目搭建/</id>
    <published>2018-12-08T01:05:24.265Z</published>
    <updated>2018-12-08T01:05:24.265Z</updated>
    
    <content type="html"><![CDATA[<p>1 . 必须安装nodejs<br>2 . 搭vue开发环境，安装vue的脚手架工具  官方命令工具<br>    npm install –g vue-cli<br>3 . 创建项目<br>    vue init weback vue-demo01<br>    cd vue-demo01<br>    cnpm install / npm install<br>    npm run dev<br>4 . 另外一种创建项目的方式<br>    vue init webpack-simple vue-demo02<br>    cd vue-demo02<br>    cnpm install / npm install<br>    npm run dev</p><p>vue的模版里面 所有的内容要被一个根结点包含起来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 . 必须安装nodejs&lt;br&gt;2 . 搭vue开发环境，安装vue的脚手架工具  官方命令工具&lt;br&gt;    npm install –g vue-cli&lt;br&gt;3 . 创建项目&lt;br&gt;    vue init weback vue-demo01&lt;br&gt;    cd 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>易盾验证</title>
    <link href="http://yoursite.com/2018/12/06/%E6%98%93%E7%9B%BE%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2018/12/06/易盾验证/</id>
    <published>2018-12-06T09:07:59.308Z</published>
    <updated>2018-12-06T09:07:59.308Z</updated>
    
    <content type="html"><![CDATA[<p>易盾是网易云旗下的一个产品<br>验证码三种模式：float(发式)、embed(嵌入式)、popup(弹出式)</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>IE7+、Chrome、Firefox、Safari、Opera、主流手机浏览器、iOS 及 Android上的内嵌Webview</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>引入初始化js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cstaticdun.126.net/load.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="调用初始化函数"><a href="#调用初始化函数" class="headerlink" title="调用初始化函数"></a>调用初始化函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initNECaptcha(config, onload, onerror)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// initNECaptcha为全局函数，可直接调用</span><br><span class="line">initNECaptcha(&#123;</span><br><span class="line">    // config对象，参数配置</span><br><span class="line">    captchaId: <span class="string">'从易盾申请的captchaId'</span>,</span><br><span class="line">    element: <span class="string">'#captcha'</span>,</span><br><span class="line">    mode: <span class="string">'float'</span>,</span><br><span class="line">    width: <span class="string">'320px'</span></span><br><span class="line">&#125;, <span class="keyword">function</span> (instance) &#123;</span><br><span class="line">    // 初始化成功后得到验证实例instance，可以调用实例的方法</span><br><span class="line">&#125;, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">    // 初始化失败后触发该函数，err对象描述当前错误信息</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>这里指初始化时传入的config对象，即调用初始化函数initNECaptcha时传入的第一个参数。智能验证码设置参数有些不同，详见表格下方特别说明。</p><table><thead><tr><th>参数</th><th>参数类型</th><th>必填</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>captchaId</td><td>string</td><td>是</td><td>无</td><td>验证码id</td></tr><tr><td>element</td><td>string</td><td>否</td><td>*</td><td>HTMLElement</td></tr><tr><td>mode</td><td>string</td><td>否</td><td>pc-&gt;float、移动端-&gt;popup</td><td>验证码模式</td></tr><tr><td>protocol</td><td>string</td><td>否</td><td>与永无网站的协议一致</td><td>验证码传输数据使用的网络协议，可选：http、https</td></tr><tr><td>width</td><td>number</td><td>否</td><td>auto</td><td>宽度</td></tr><tr><td>lang</td><td>string</td><td>否</td><td>zh-CN</td><td>验证码语言选项。支持”zh-CN”、”en”，即简体中文和英文</td></tr><tr><td>onReady</td><td>function</td><td>否</td><td>无</td><td>NECaptcha所有工作准备就绪，用户可以使用验证码时触发该回调。具体使用见完整示例</td></tr><tr><td>onVertify</td><td>function</td><td>否</td><td>无</td><td>验证码验证结束回调函数。具体使用见完整示例</td></tr></tbody></table><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>这里指initNECaptcha初始化成功，onload触发时传入的实例的方法。<br>refresh：刷新验证码，获取新的验证信息<br>destroy：销毁当前实例<br>popUp：当验证码是常规验证码并且mode为”popup”时，可调用该实例方法弹出验证码进行验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">initNECaptcha(config, <span class="keyword">function</span> onload (instance) &#123;</span><br><span class="line">    // 可在此处调用实例方法</span><br><span class="line">&#125;, onerror)</span><br></pre></td></tr></table></figure></p><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;input  <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt;</span><br><span class="line">   &lt;input  <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt;</span><br><span class="line">   &lt;input  <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"captchaId"</span> value=<span class="string">"从易盾申请的captchaId"</span>&gt;</span><br><span class="line">   &lt;div id=<span class="string">"captcha"</span>&gt;&lt;/div&gt; &lt;!-- 验证码容器元素 --&gt;</span><br><span class="line">   &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src=<span class="string">"//cstaticdun.126.net/load.min.js"</span>&gt;&lt;/script&gt;&lt;!-- 初始化JS --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    initNECaptcha(&#123;</span><br><span class="line">      captchaId: <span class="string">'从易盾申请的captchaId'</span>,</span><br><span class="line">      element: <span class="string">'#captcha'</span>,</span><br><span class="line">      mode: <span class="string">'float'</span>,</span><br><span class="line">      width: 320</span><br><span class="line">    &#125;, <span class="keyword">function</span> onload (instance) &#123;</span><br><span class="line">      // 初始化成功后，用户输入对应用户名和密码，以及完成验证后，直接点击登录按钮即可</span><br><span class="line">    &#125;, <span class="keyword">function</span> onerror (err) &#123;</span><br><span class="line">      // 验证码初始化失败处理逻辑，例如：提示用户点击按钮重新初始化</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><h3 id="onVerify"><a href="#onVerify" class="headerlink" title="onVerify"></a>onVerify</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"form-container"</span>&gt;</span><br><span class="line">    &lt;input  <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span> placeholder=<span class="string">"用户名"</span>&gt;</span><br><span class="line">    &lt;input  <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> id=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"captcha"</span>&gt;&lt;/div&gt; &lt;!-- 验证码容器元素 --&gt;</span><br><span class="line">    登录</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">"//cstaticdun.126.net/load.min.js"</span>&gt;&lt;/script&gt;&lt;!-- 初始化JS --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    initNECaptcha(&#123;</span><br><span class="line">      captchaId: <span class="string">'从易盾申请的captchaId'</span>,</span><br><span class="line">      element: <span class="string">'#captcha'</span>,</span><br><span class="line">      mode: <span class="string">'float'</span>,</span><br><span class="line">      width: 320,</span><br><span class="line">      onReady: <span class="keyword">function</span> (instance) &#123;</span><br><span class="line">        // 验证码一切准备就绪，此时可正常使用验证码的相关功能</span><br><span class="line">      &#125;,</span><br><span class="line">      onVerify: <span class="keyword">function</span> (err, data) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 第一个参数是err（Error的实例），验证失败才有err对象</span><br><span class="line">         * 第二个参数是data对象，验证成功后的相关信息，data数据结构为key-value，如下：</span><br><span class="line">         * &#123;</span><br><span class="line">         *   validate: <span class="string">'xxxxx'</span> // 二次验证信息</span><br><span class="line">         * &#125;</span><br><span class="line">         */</span><br><span class="line">        // 点击登录按钮后可调用服务端接口，以下为伪代码，仅作示例用</span><br><span class="line">        ajax(<span class="string">'/login'</span>, &#123;</span><br><span class="line">          captchaId: <span class="string">'从易盾申请的captchaId'</span>,</span><br><span class="line">          username: $(<span class="string">'#username'</span>).val(),</span><br><span class="line">          password: $(<span class="string">'#password'</span>).val(),</span><br><span class="line">          validate: data.validate</span><br><span class="line">        &#125;, <span class="keyword">function</span> onsuccess (data) &#123;</span><br><span class="line">          // 登录成功后，相关处理逻辑</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> onload (instance) &#123;</span><br><span class="line">      // 初始化成功</span><br><span class="line">    &#125;, <span class="keyword">function</span> onerror (err) &#123;</span><br><span class="line">      // 验证码初始化失败处理逻辑，例如：提示用户点击按钮重新初始化</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="popup"><a href="#popup" class="headerlink" title="popup"></a>popup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"j-popup"</span>&gt;点击弹出验证码&lt;/button&gt;</span><br><span class="line">&lt;div id=<span class="string">"captcha"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script  charset=<span class="string">"UTF-8"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://cstaticdun.126.net/load.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var captchaIns;</span><br><span class="line">  initNECaptcha(&#123;</span><br><span class="line">    element: <span class="string">'#captcha'</span>,</span><br><span class="line">    captchaId: <span class="string">'从易盾申请的captchaId'</span>,</span><br><span class="line">    mode: <span class="string">'popup'</span>,</span><br><span class="line">    width: <span class="string">'320px'</span></span><br><span class="line">  &#125;, <span class="keyword">function</span> (instance) &#123;</span><br><span class="line">    // 初始化成功后得到验证实例instance，可以调用实例的方法</span><br><span class="line">    captchaIns = instance</span><br><span class="line">  &#125;, <span class="keyword">function</span> (err) &#123;</span><br><span class="line">    // 初始化失败后触发该函数，err对象描述当前错误信息</span><br><span class="line">  &#125;)</span><br><span class="line">  // 监听button的点击事件，弹出验证码</span><br><span class="line">  document.getElementById(<span class="string">'j-popup'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    captchaIns.popUp()</span><br><span class="line">&lt;/scripr&gt;</span><br></pre></td></tr></table></figure><p>注意：onload和onReady的区别：<br>   onload和onReady触发时，均会返回验证码的实例，即传入的第一个参数。二者触发时机有所不同，onload触发时，初始化函数结束和完成实例的生成，注意这并不代表验证码是可用的（比如验证码相关背景图片和信息并没有加载），此方法只触发一次。onReady触发时，说明验证码准备就绪（比如背景图片等信息均已加载），在popup模式下，每次弹出均会触发onReady，其他模式下onReady只触发一次。</p><p>文章来自：<a href="https://blog.csdn.net/w97531/article/details/80448239" target="_blank" rel="noopener">网站验证码WEB前端接入实例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;易盾是网易云旗下的一个产品&lt;br&gt;验证码三种模式：float(发式)、embed(嵌入式)、popup(弹出式)&lt;/p&gt;
&lt;h2 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h2&gt;&lt;p&gt;IE
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>全屏与居中</title>
    <link href="http://yoursite.com/2018/12/05/%E5%85%A8%E5%B1%8F%E4%B8%8E%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/12/05/全屏与居中/</id>
    <published>2018-12-05T14:13:32.802Z</published>
    <updated>2018-12-05T14:13:32.803Z</updated>
    
    <content type="html"><![CDATA[<p>这边文章主要记录我今天看代码和练习代码关于盒子布局的收获</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"wrap"</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">"left"</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">"l-content"</span>&gt;我是左边的内容&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">"right"</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">"r-content"</span>&gt;我是右边的小可爱&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h2><p>如果我们想让一个盒子水平或者垂直方向居中，我们一般都会给它设置宽度和高度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* &#123;margin: 0;padding: 0;&#125;</span><br><span class="line">.wrap &#123;height: 100%;</span><br><span class="line">    background-color: <span class="comment">#00c47d;</span></span><br><span class="line">    clear: both;</span><br><span class="line">    min-hight: 300px;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: <span class="comment">#ffff00;</span></span><br><span class="line">    <span class="built_in">float</span>: left;</span><br><span class="line">    width: 50%;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.l-content &#123;</span><br><span class="line">    background-color: <span class="comment">#00acec;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    background-color: <span class="comment">#2e7ac4;</span></span><br><span class="line">    <span class="built_in">float</span>: right;</span><br><span class="line">    width: 50%;</span><br><span class="line">&#125;</span><br><span class="line">.r-content &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="垂直方向全屏"><a href="#垂直方向全屏" class="headerlink" title="垂直方向全屏"></a>垂直方向全屏</h2><p>目前我看到的方法答题就只有这一种，首先设置body和html的高度为100%，再设置盒子的高度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html,body &#123;height:100%&#125;</span><br><span class="line">.wrap &#123;height:10%&#125;</span><br></pre></td></tr></table></figure></p><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>较为简单就是这种，要注意的是，当position的值不为static时，这种方法不会生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.l-content &#123;</span><br><span class="line">    margin: 0 auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.l-content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-left: -100px; // 这个盒子宽度的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="postion"><a href="#postion" class="headerlink" title="postion"></a>postion</h3><p>postion完成大致地定位，margin调整居中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.l-content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -100px; // 这个盒子宽度的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="margin-1"><a href="#margin-1" class="headerlink" title="margin"></a>margin</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.r-content &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    margin: auto 0;</span><br><span class="line">    max-height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.r-content &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(0, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>对父亲盒子使用弹性布局<br>方法一<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.right &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">   align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.right &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这边文章主要记录我今天看代码和练习代码关于盒子布局的收获&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6特性</title>
    <link href="http://yoursite.com/2018/12/04/ES6/"/>
    <id>http://yoursite.com/2018/12/04/ES6/</id>
    <published>2018-12-04T08:56:12.402Z</published>
    <updated>2018-12-04T08:56:12.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h2><p> ECMScript6简称ES6，是JavaScript语言的下一代标砖，以及在2015年6余额发布。<br> ECMScript和JavaScript的关系：前者是后者的语法规格，后者是前者的一种实现</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="let、const"><a href="#let、const" class="headerlink" title="let、const"></a>let、const</h3><p>let定义的变量不会被变量提升，const定义的常量不能被修改<br>const定义了一个对象，对象的属性是可以被修改的，例：student.name = “cc”</p><h3 id="import、export"><a href="#import、export" class="headerlink" title="import、export"></a>import、export</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 全部导入</span><br><span class="line">import people from <span class="string">'./example'</span></span><br><span class="line">// 将整个模块当作单一对象进行导入，该模块的所有导出都会作为对象的属性存在</span><br><span class="line">import * as example from <span class="string">"./example.js"</span></span><br><span class="line">console.log(example.name)</span><br><span class="line">console.log(example.getName())</span><br><span class="line">// 导入部分，引入非 default 时，使用花括号</span><br><span class="line">import &#123;name, age&#125; from <span class="string">'./example'</span></span><br><span class="line">// 导出默认, 有且只有一个默认</span><br><span class="line"><span class="built_in">export</span> default App</span><br><span class="line">// 部分导出</span><br><span class="line"><span class="built_in">export</span> class App extend Component &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="class、extends、super"><a href="#class、extends、super" class="headerlink" title="class、extends、super"></a>class、extends、super</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    　　this.type = <span class="string">'animal'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    says(say) &#123;</span><br><span class="line">    　　console.log(this.type + <span class="string">' says '</span> + say);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> animal = new Animal();</span><br><span class="line">animal.says(<span class="string">'hello'</span>); //animal says hello</span><br><span class="line">class Cat extends Animal &#123;</span><br><span class="line">　　<span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">　　　　super();</span><br><span class="line">　　　　this.type = <span class="string">'cat'</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> cat = new Cat();</span><br><span class="line">cat.says(<span class="string">'hello'</span>); //cat says hello</span><br></pre></td></tr></table></figure><p>首先定义了一个”类”，有constructor构造方法，this关键字则代表实例对象。换句话来说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的<br>class之间可以通过extends实现继承。如实例中Cat类，通过extends关键字，继承了Animal类的所有属性和fnagfa。<br>super关键字，它指代父亲的实例（即父亲的this对象）。子类必须在constructor方法中调用super方法，否则实例时会报错。因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用，子类就得不到this对象<br>ES6的继承机制，实质是看创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>函数的快捷写法。不需要function来创建函数，省略retrun，继承当前上下文的this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// ES5</span><br><span class="line">var arr1 = [1, 2, 3];</span><br><span class="line">var newArr1 = arr1.map(<span class="keyword">function</span>(x) &#123;</span><br><span class="line">　　<span class="built_in">return</span> x + 1;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// ES6</span><br><span class="line"><span class="built_in">let</span> newArr2 = arr1.map((x) =&gt; &#123;</span><br><span class="line">　　x + 1</span><br><span class="line">&#125;);</span><br><span class="line">// ES6 函数有且只有一个参数是，可以省略括号，函数中有且只有一个表达式可以省略&#123;&#125;</span><br><span class="line"><span class="built_in">let</span> newArr2 = arr1.map(x =&gt; x + 1 );</span><br></pre></td></tr></table></figure></p><h3 id="tempalte-string-模版字符串"><a href="#tempalte-string-模版字符串" class="headerlink" title="tempalte string(模版字符串)"></a>tempalte string(模版字符串)</h3><p>第一个用途：字符串拼接。将表达式嵌入字符串中进行拼接，语法 <code>hello ${变量}</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">var name1 = <span class="string">"bai"</span>;</span><br><span class="line">console.log(<span class="string">'hello '</span> + name1);</span><br><span class="line">// es6</span><br><span class="line">const name2 = <span class="string">"ming"</span>;</span><br><span class="line">console.log(`hello <span class="variable">$&#123;name2&#125;</span>`);</span><br></pre></td></tr></table></figure></p><p>第二个用途：多行字符串拼接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// es5</span><br><span class="line">var msg = <span class="string">"Hi \</span></span><br><span class="line"><span class="string">man!"</span>;</span><br><span class="line">// es6</span><br><span class="line">const template = `&lt;div&gt;</span><br><span class="line">&lt;span&gt;hello world&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;`;</span><br></pre></td></tr></table></figure></p><h3 id="destructing-解构"><a href="#destructing-解构" class="headerlink" title="destructing (解构)"></a>destructing (解构)</h3><p>简化数组和对象中信息的提取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> people2 = &#123;</span><br><span class="line">　　name: <span class="string">'ming'</span>,</span><br><span class="line">　　age: 20,</span><br><span class="line">　　color: [<span class="string">'red'</span>, <span class="string">'blue'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> &#123; name, age &#125; = people2;</span><br><span class="line"><span class="built_in">let</span> [first, second] = people2.color;</span><br><span class="line">console.log(`<span class="variable">$&#123;name&#125;</span>----<span class="variable">$&#123;age&#125;</span>----<span class="variable">$&#123;first&#125;</span>`);</span><br></pre></td></tr></table></figure></p><h3 id="default-函数默认参数"><a href="#default-函数默认参数" class="headerlink" title="default 函数默认参数"></a>default 函数默认参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// ES5 给函数定义参数默认值</span><br><span class="line"><span class="keyword">function</span> foo(num) &#123;</span><br><span class="line">　　num = num || 200;</span><br><span class="line">　　<span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">// ES6</span><br><span class="line"><span class="keyword">function</span> foo(num = 200) &#123;</span><br><span class="line">　　<span class="built_in">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rest-arguments-（rest参数）"><a href="#rest-arguments-（rest参数）" class="headerlink" title="rest arguments （rest参数）"></a>rest arguments （rest参数）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(x, y, ...rest) &#123;</span><br><span class="line">　　<span class="built_in">return</span> ((x + y) * rest.length);</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, <span class="string">'hello'</span>, <span class="literal">true</span>, 7); // 9</span><br></pre></td></tr></table></figure><h3 id="Spread-Operator-（展开运算符）"><a href="#Spread-Operator-（展开运算符）" class="headerlink" title="Spread Operator （展开运算符）"></a>Spread Operator （展开运算符）</h3><p>第一个用途：组装数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">let</span> colorful = [...color, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line">console.log(colorful); // [<span class="string">"red"</span>, <span class="string">"yellow"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>]</span><br></pre></td></tr></table></figure></p><p>第二个用途：获取数组除了某几项的其他项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> num = [1, 3, 5, 7, 9];</span><br><span class="line"><span class="built_in">let</span> [first, second, ...rest] = num;</span><br><span class="line">console.log(rest); // [5, 7, 9]</span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// ES5</span><br><span class="line"><span class="keyword">function</span> people(name, age) &#123;</span><br><span class="line">　　<span class="built_in">return</span> &#123;</span><br><span class="line">　　　　name: name,</span><br><span class="line">　　　　age: age</span><br><span class="line">　　&#125;;</span><br><span class="line">&#125;</span><br><span class="line">// ES6</span><br><span class="line"><span class="keyword">function</span> people(name, age) &#123;</span><br><span class="line">　　<span class="built_in">return</span> &#123;</span><br><span class="line">　　　　name,</span><br><span class="line">　　　　age</span><br><span class="line">　　&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外：Object.assign()<br>ES6 对象提供了Object.assign()这个方法来实现浅复制。Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{}<br>用法1：合并对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var first = &#123; name: <span class="string">"Bob"</span> &#125;;</span><br><span class="line">var last = &#123; lastName: <span class="string">"Smith"</span> &#125;;</span><br><span class="line">var person = Object.assign(first, last);</span><br><span class="line">console.log(person);</span><br><span class="line">// Output:</span><br><span class="line">// &#123; name: <span class="string">"Bob"</span>, lastName: <span class="string">"Smith"</span> &#125;</span><br></pre></td></tr></table></figure></p><p>用法2：克隆对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; person: <span class="string">"Bob Smith"</span>&#125;;</span><br><span class="line">var <span class="built_in">clone</span> = Object.assign(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure></p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>用同步的方式写一步代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 发起异步请求</span><br><span class="line">fetch(<span class="string">'/api/todos'</span>)</span><br><span class="line">.<span class="keyword">then</span>(res =&gt; res.json())</span><br><span class="line">.<span class="keyword">then</span>(data =&gt; (&#123; data &#125;))</span><br><span class="line">.catch(err =&gt; (&#123; err &#125;));</span><br></pre></td></tr></table></figure></p><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>生成器（generator）是能返回一个迭代器的函数<br>生成器也是一种函数，最直观的表现就是比普通的function多一个*号，在其函数体内可以使用yield关键字，函数会在每个yield后暂停<br>如：银行取号排队办理业务<br>迭代器：调用一个generator时，它将返回一个迭代器对象。这个跌打器对象拥有一个叫做next的方法帮组你重启generator函数并得到了下一个值。nenxt方法不返回值，它返回的对象具有两个属性：done和value。calue是你获得的值，done用来表明你的generator是否已停止提供值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 生成器</span><br><span class="line"><span class="keyword">function</span> *<span class="function"><span class="title">createIterator</span></span>() &#123;</span><br><span class="line">    yield 1;</span><br><span class="line">    yield 2;</span><br><span class="line">    yield 3;</span><br><span class="line">&#125;</span><br><span class="line">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span><br><span class="line"><span class="built_in">let</span> iterator = createIterator();</span><br><span class="line">console.log(iterator.next().value); // 1</span><br><span class="line">console.log(iterator.next().value); // 2</span><br><span class="line">console.log(iterator.next().value); // 3</span><br></pre></td></tr></table></figure></p><p>参考文献：<a href="https://www.cnblogs.com/fangsmile/p/7081194.html" target="_blank" rel="noopener">https://www.cnblogs.com/fangsmile/p/7081194.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h2&gt;&lt;p&gt; ECMScript6简称ES6，是JavaScript语言的下一代标砖，以及在2015年6余额发布。&lt;br&gt; EC
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2018/12/04/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/12/04/flex布局/</id>
    <published>2018-12-04T06:14:02.897Z</published>
    <updated>2018-12-04T06:14:02.897Z</updated>
    
    <content type="html"><![CDATA[<p>弹性盒子 display:flex<br>flex为复合属性，且必须配合父元素display:flex使用。<br>以下6个属性设置在子元素上：</p><ul><br>    <li>flex-grow：放大比例</li><br>    <li>flex-shrink：缩小比例</li><br>    <li>flex-basis：伸缩基准值</li><br>    <li>flex：前面三者的缩写</li><br>    <li>order：排列顺序</li><br>    <li>align：单个元素对齐方式ß</li><br></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;弹性盒子 display:flex&lt;br&gt;flex为复合属性，且必须配合父元素display:flex使用。&lt;br&gt;以下6个属性设置在子元素上：&lt;/p&gt;
&lt;ul&gt;&lt;br&gt;    &lt;li&gt;flex-grow：放大比例&lt;/li&gt;&lt;br&gt;    &lt;li&gt;flex-shrink：缩
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单选框和复选框</title>
    <link href="http://yoursite.com/2018/12/04/input/"/>
    <id>http://yoursite.com/2018/12/04/input/</id>
    <published>2018-12-04T05:50:55.479Z</published>
    <updated>2018-12-04T05:50:55.479Z</updated>
    
    <content type="html"><![CDATA[<p>input的功能可以说是非常强大了，他的属性不同，呈现的效果是完全不一样的</p><h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;性别：&lt;label&gt;</span><br><span class="line">男：&lt;input <span class="built_in">type</span>=<span class="string">'radio'</span> name=<span class="string">'gender'</span>&gt;</span><br><span class="line">女：&lt;input <span class="built_in">type</span>=<span class="string">'radio'</span> name=<span class="string">'gender'</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;爱好：&lt;label&gt;</span><br><span class="line">篮球：&lt;input <span class="built_in">type</span>=<span class="string">'checkbox'</span> name=<span class="string">'hobby'</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">足球：&lt;input <span class="built_in">type</span>=<span class="string">'checkbox'</span> name=<span class="string">'hobby'</span> value=<span class="string">"2"</span>&gt;</span><br><span class="line">跑步：&lt;input <span class="built_in">type</span>=<span class="string">'checkbox'</span> name=<span class="string">'hobby'</span> value=<span class="string">"3"</span>&gt;</span><br><span class="line">跳舞：&lt;input <span class="built_in">type</span>=<span class="string">'checkbox'</span> name=<span class="string">'hobby'</span> value=<span class="string">"4"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th>属性</th><th>值及功能</th></tr></thead><tbody><tr><td>type</td><td>radio:单选框  checkbox:复选框</td></tr><tr><td>value</td><td>提交数据到后台的值</td></tr><tr><td>checked</td><td>当设置 checked=true或者”checked” 时，该选项被默认选中</td></tr><tr><td>disabled</td><td>true：禁用  false(默认):非禁用</td></tr></tbody></table><p>checkbox视觉上忧伤三种状态： checked(选中)、unchecked(未选中)、indeterminate(不确定的)</p><p>element中的input：<a href="http://element-cn.eleme.io/#/zh-CN/component/input" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/input</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;input的功能可以说是非常强大了，他的属性不同，呈现的效果是完全不一样的&lt;/p&gt;
&lt;h2 id=&quot;单选框&quot;&gt;&lt;a href=&quot;#单选框&quot; class=&quot;headerlink&quot; title=&quot;单选框&quot;&gt;&lt;/a&gt;单选框&lt;/h2&gt;&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/12/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/12/03/正则表达式/</id>
    <published>2018-12-03T03:51:34.789Z</published>
    <updated>2018-12-03T03:51:34.790Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式有一些普通字符和一些元字符组成。普通字符包括大小写的字母和数字，而元字符则具有特殊含义。<br>匹配有两种概念：一种时匹配字符，一种是匹配位置</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>简单理解就是转义字符。将下一个字符标记符，或一个向后引用，或者一个八进制转义符。例如：”\n”匹配\n，”\n”匹配换行符</td></tr><tr><td>^</td><td>行首</td></tr><tr><td>$</td><td>行尾</td></tr><tr><td>*</td><td>前面子表达式表达式任意次。例如：zo能匹配z、zo、zoo。等价于{0,}</td></tr><tr><td>+</td><td>前面子表达式表达式大于等于1次。例如：zo能匹配zo、zoo。等价于{1,}</td></tr><tr><td>?</td><td>前面子表达式表达式0次或1次。例如：do(es)能匹配do、does。等价于{0,1}</td></tr><tr><td>{n}</td><td>匹配确定的n次，n为非负整数。例如：o{2}能匹配food中的两个o。</td></tr><tr><td>{n,}</td><td>至少匹配的n次，n为非负整数。例如：o{2}能匹配fooooood中的所有的o。</td></tr><tr><td>{n,m}</td><td>匹配n至m次，n为非负整数。例如：o{1,3}能匹配fooooood中的前三个o为1组，后三个o为一组。</td></tr><tr><td>[xyz]</td><td>匹配xyz任意一个</td></tr><tr><td>[^xyz]</td><td>匹配未包含的任意字符</td></tr><tr><td>[a-z]</td><td>字母范围。</td></tr><tr><td>[^a-z]</td><td>非字母范围。</td></tr><tr><td>\b</td><td>匹配单词的边界，单词与空格间的位置。例如：er\b可以匹配到her中的er，不能匹配herb中的</td></tr><tr><td>\B</td><td>匹配非单词的边界。</td></tr><tr><td>\cx</td><td>匹配有x说明的控制符，x必须是[a-Z]中的一个。例如：\cM匹配的时control—M或者回车符</td></tr><tr><td>\d</td><td>匹配数字，等价于[0-9]</td></tr><tr><td>\D</td><td>匹配非数字，等价于[^0-9]</td></tr><tr><td>\f</td><td>换页，等价于\x0c和\cL</td></tr><tr><td>\n</td><td>换行，等价于\x0a和\cJ</td></tr><tr><td>\r</td><td>回车，等价于\x0d和\cM</td></tr><tr><td>\d</td><td>任意不可见字符，包括空格、制表符、换行符等等，等价于[\f\n\t\r\v]</td></tr><tr><td>\D</td><td>任意可见字符，包括空格、制表符、换行符等等，等价于[^\f\n\t\r\v]</td></tr></tbody></table><p><em>、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。<br>通过在 </em>、+ 或 ? 限定符之后放置 ?，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正则表达式有一些普通字符和一些元字符组成。普通字符包括大小写的字母和数字，而元字符则具有特殊含义。&lt;br&gt;匹配有两种概念：一种时匹配字符，一种是匹配位置&lt;/p&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue扫码支付功能的实现</title>
    <link href="http://yoursite.com/2018/12/02/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/12/02/支付流程解析/</id>
    <published>2018-12-02T08:26:14.429Z</published>
    <updated>2018-12-02T08:26:14.429Z</updated>
    
    <content type="html"><![CDATA[<p>简述：生成二维码，用户扫码支付后，然后跳转到指定的的页面</p><h2 id="过程解析"><a href="#过程解析" class="headerlink" title="过程解析"></a>过程解析</h2><ol><li>用户点击充值按钮</li><li>弹出一个对话框</li><li>用户充值金额，点击下一步，在这部中执行的操作有两个请求，<br> 函数a：请求根据用户填写的金额，拿到订单号；<br> 函数b：请求根据订单号拿到我们需要的二维码；</li><li>弹出第二个对话框，第二个对话框的内容有充值的金额和二维码，充值金额在这个框中仍然可以修改，</li><li>在用户修改完成，点击保存的时候，再调用函数a和b</li><li>系统通过函数b，检测到用户扫码成功后，跳转到支付成功页面，并调用显示余额</li></ol><h2 id="函数a"><a href="#函数a" class="headerlink" title="函数a"></a>函数a</h2><p>函数a中只需要往后台发送一个请求，就是请求订单号</p><h2 id="函数b"><a href="#函数b" class="headerlink" title="函数b"></a>函数b</h2><p>函数b中主要有两个请求，<br>第一个请求：根据订单号获得二维码<br>第二个请求：往后台发送用户信息，并监控用户是否以及扫码支付</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简述：生成二维码，用户扫码支付后，然后跳转到指定的的页面&lt;/p&gt;
&lt;h2 id=&quot;过程解析&quot;&gt;&lt;a href=&quot;#过程解析&quot; class=&quot;headerlink&quot; title=&quot;过程解析&quot;&gt;&lt;/a&gt;过程解析&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用户点击充值按钮&lt;/li&gt;
&lt;li&gt;弹出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue中前端接口的调用两种方式</title>
    <link href="http://yoursite.com/2018/12/02/vue%E4%B8%AD%E5%89%8D%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/02/vue中前接口调用/</id>
    <published>2018-12-02T02:18:03.162Z</published>
    <updated>2018-12-02T02:18:03.163Z</updated>
    
    <content type="html"><![CDATA[<p>在做实际项目中，我遇到的两种调用api的方式</p><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><h3 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h3><p>文件名：a-manger.js<br>文件地址：src/api/a-manger.js<br>文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import utils from <span class="string">'src/utils'</span></span><br><span class="line">// utils文件夹里面放我们需要用到的ajax相关的文件</span><br><span class="line">const AManger = &#123;</span><br><span class="line">  queryName (userid) &#123;</span><br><span class="line">    <span class="built_in">return</span> utils.ajax(&#123;</span><br><span class="line">      method: <span class="string">'post'</span>  //请求方式：post和get</span><br><span class="line">      url: <span class="string">'接口地址'</span></span><br><span class="line">      params: userid</span><br><span class="line">      // 注意 这儿传入的是 userid = 值，es6简写</span><br><span class="line">      // 多个参数是，params就是一个对象，比如 params: &#123;id: id,name: name&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default aManger</span><br></pre></td></tr></table></figure></p><p>&lt;span style=’color:red&gt;注意: 文件末尾一定要写上export defauly aManger</p><h3 id="使用文件"><a href="#使用文件" class="headerlink" title="使用文件"></a>使用文件</h3><p>文件名：b.vue<br>文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;此处内容省略&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import aManger from <span class="string">'src/api/a-manger'</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> default &#123;</span><br><span class="line">      name: <span class="string">'b'</span>,</span><br><span class="line">        <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">          <span class="built_in">return</span> &#123;</span><br><span class="line">            name: <span class="string">''</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        f (userid) &#123;</span><br><span class="line">          aManger.queryName(userid).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line">            // res就是后台返回的结果</span><br><span class="line">            // 一定要判断返回的结果</span><br><span class="line">            <span class="keyword">if</span> (res.code === 200)&#123;</span><br><span class="line">              this.name = res.data.name</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;span style=<span class="string">'color:red&gt;注意:&lt;/span&gt; 如果在调用f函数时，想要立即拿到name的值，就需要使用对f以及调用这个地方aynsc和await</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 第二种方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 接口文件</span></span><br><span class="line"><span class="string">文件名：d-manger.js</span></span><br><span class="line"><span class="string">文件地址：src/api/d-manger.js</span></span><br><span class="line"><span class="string">文件内容：</span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  GET_ACTIVITY_INFO: '</span>接口地址<span class="string">'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>&lt;span style=’color:red&gt;注意: 冒号前的名字要全部大写</p><h3 id="使用文件-1"><a href="#使用文件-1" class="headerlink" title="使用文件"></a>使用文件</h3><p>文件名：b.vue<br>文件内容：<br><code>`</code>bash</p><p><template>此处内容省略<template></template></template></p><p><script><br>  import dManger from ‘src/api/d-manger’</p><pre><code>export default {  name: &apos;b&apos;,    data(){      return {        name: &apos;&apos;      }    },  methods: {    f () {      this.$get(dManger.GET_ACTIVITY_INFO,{        activityId: this.activityId      }).then((res) =&gt; {        if (res.code === 200){          this.activityId = res.data        }      })    }  }}</code></pre><p><script><br>&lt;span style=’color:red&gt;注意:</span> 如果在调用f函数时，想要立即拿到name的值，就需要使用对f以及调用这个地方aynsc和await</p></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做实际项目中，我遇到的两种调用api的方式&lt;/p&gt;
&lt;h2 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h2&gt;&lt;h3 id=&quot;接口文件&quot;&gt;&lt;a href=&quot;#接口文件&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>20181127收获与问题</title>
    <link href="http://yoursite.com/2018/11/27/20181127/"/>
    <id>http://yoursite.com/2018/11/27/20181127/</id>
    <published>2018-11-27T05:45:39.504Z</published>
    <updated>2018-11-27T05:45:39.505Z</updated>
    
    <content type="html"><![CDATA[<p>看代码</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><br>    <li>过渡(transition)的钩子函数：beforeEnter、enter、afterEnter</li><br>    <li>this.$el是在mounted中才会出现的,它指的是当前组件的的元素</li><br>    <li>offset和client</li><br>    <li>this.$nextTick：</li><br>    <li></li><br>    <li></li><br>    <li></li><br>    <li></li><br>    <li></li><br></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><br>    <li>slot的用法</li><br>    <li>v-if后面this的指向</li><br>    <li>$emit的用法</li><br>    <li>ComConstructor是什么<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const instance = new ComConstructor(&#123;</span><br><span class="line">    propsData: &#123;</span><br><span class="line">        ...rest</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><br>    play-video里面的fun.js文件<br><br>      </li><br>    <li></li><br>    <li></li><br>    <li></li><br>    <li></li><br>    <li></li><br></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看代码&lt;/p&gt;
&lt;h2 id=&quot;收获&quot;&gt;&lt;a href=&quot;#收获&quot; class=&quot;headerlink&quot; title=&quot;收获&quot;&gt;&lt;/a&gt;收获&lt;/h2&gt;&lt;ol&gt;&lt;br&gt;    &lt;li&gt;过渡(transition)的钩子函数：beforeEnter、enter、afterEnt
      
    
    </summary>
    
    
  </entry>
  
</feed>
